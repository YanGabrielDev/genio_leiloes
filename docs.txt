(feature-based arc)
📦src
┣ 📂assets            # Arquivos estáticos
┣ 📂components        # Componentes compartilhados
┃ ┣ 📂ui             # Componentes UI (Shadcn)
┃ ┗ 📂Template       # Template principal
┣ 📂context          # Contextos globais
┣ 📂features         # Funcionalidades (feature-based)
┃ ┣ 📂auth          # Autenticação
┃ ┃ ┣ 📂components  # Formulários
┃ ┃ ┣ 📂hooks       # Lógica específica
┃ ┃ ┣ 📂schemas     # Validações
┃ ┃ ┗ 📂services    # API/auth
┃ ┣ 📂details       # Página de detalhes
┃ ┃ ┣ 📂components  # Componentes da página
┃ ┃ ┗ 📂hooks       # Lógica específica
┃ ┣ 📂home          # Página inicial
┃ ┃ ┣ 📂components  # Cards de leilão
┃ ┃ ┗ 📂hooks       # Lógica específica
┃ ┗ 📂account   # Área do usuário
┣ 📂lib             # Utilitários e configurações
┣ 📂routes          # Configuração de rotas
┣ 📂styles          # Estilos globais
┗ 📜main.tsx        # Entrada da aplicação

✅ 1. Coesão e Modularidade
Cada feature é autocontida:

Todos os arquivos relacionados a uma funcionalidade (ex: autenticação) ficam agrupados em uma única pasta (/features/auth).

Inclui componentes, hooks, schemas, serviços e tipos específicos daquela feature.

Exemplo:

text
/features/auth
┣ 📂components   # Formulários de login/signup
┣ 📂hooks        # useLogin, useGoogleAuth
┣ 📂services     # API calls
┗ 📂schemas      # Validações de formulário
Facilita a manutenção: Alterações ou debug ficam restritos a um escopo claro.

✅ 2. Escalabilidade
Adição de novas features sem poluição:

Para adicionar uma nova funcionalidade (ex: notifications), basta criar uma pasta em /features com sua própria estrutura.

Evita "inflação" de pastas genéricas (como /components ou /hooks com centenas de arquivos não relacionados).

✅ 3. Isolamento de Lógica
Hooks e serviços específicos:

Cada feature tem seus próprios hooks (ex: useFilteredVehicles só existe em /features/home).

Reduz dependências globais e conflitos de nomes.

Contextos otimizados:

Contextos como vehicle-filter.context só são usados onde são realmente necessários.

