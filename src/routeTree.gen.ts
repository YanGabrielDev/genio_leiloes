/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PaymentSuccessImport } from './routes/payment-success'
import { Route as PaymentErrorImport } from './routes/payment-error'
import { Route as PaymentImport } from './routes/payment'
import { Route as LoginImport } from './routes/login'
import { Route as AuctionAlertImport } from './routes/auction-alert'
import { Route as AccountImport } from './routes/account'
import { Route as IndexImport } from './routes/index'
import { Route as DetailsVehicleIdImport } from './routes/details.$vehicleId'
import { Route as AuctionAlertCreateImport } from './routes/auction-alert.create'

// Create/Update Routes

const PaymentSuccessRoute = PaymentSuccessImport.update({
  id: '/payment-success',
  path: '/payment-success',
  getParentRoute: () => rootRoute,
} as any)

const PaymentErrorRoute = PaymentErrorImport.update({
  id: '/payment-error',
  path: '/payment-error',
  getParentRoute: () => rootRoute,
} as any)

const PaymentRoute = PaymentImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuctionAlertRoute = AuctionAlertImport.update({
  id: '/auction-alert',
  path: '/auction-alert',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DetailsVehicleIdRoute = DetailsVehicleIdImport.update({
  id: '/details/$vehicleId',
  path: '/details/$vehicleId',
  getParentRoute: () => rootRoute,
} as any)

const AuctionAlertCreateRoute = AuctionAlertCreateImport.update({
  id: '/create',
  path: 'auction-alert/create',
  getParentRoute: () => AuctionAlertRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/auction-alert': {
      id: '/auction-alert'
      path: '/auction-alert'
      fullPath: '/auction-alert'
      preLoaderRoute: typeof AuctionAlertImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentImport
      parentRoute: typeof rootRoute
    }
    '/payment-error': {
      id: '/payment-error'
      path: '/payment-error'
      fullPath: '/payment-error'
      preLoaderRoute: typeof PaymentErrorImport
      parentRoute: typeof rootRoute
    }
    '/payment-success': {
      id: '/payment-success'
      path: '/payment-success'
      fullPath: '/payment-success'
      preLoaderRoute: typeof PaymentSuccessImport
      parentRoute: typeof rootRoute
    }
    '/auction-alert/create': {
      id: '/auction-alert/create'
      path: '/create'
      fullPath: '/auction-alert/create'
      preLoaderRoute: typeof AuctionAlertCreateImport
      parentRoute: typeof AuctionAlertImport
    }
    '/details/$vehicleId': {
      id: '/details/$vehicleId'
      path: '/details/$vehicleId'
      fullPath: '/details/$vehicleId'
      preLoaderRoute: typeof DetailsVehicleIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuctionAlertRouteChildren {
  AuctionAlertCreateRoute: typeof AuctionAlertCreateRoute
}

const AuctionAlertRouteChildren: AuctionAlertRouteChildren = {
  AuctionAlertCreateRoute: AuctionAlertCreateRoute,
}

const AuctionAlertRouteWithChildren = AuctionAlertRoute._addFileChildren(
  AuctionAlertRouteChildren
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/auction-alert': typeof AuctionAlertRouteWithChildren
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/auction-alert/create': typeof AuctionAlertCreateRoute
  '/details/$vehicleId': typeof DetailsVehicleIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/auction-alert': typeof AuctionAlertRouteWithChildren
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/auction-alert/create': typeof AuctionAlertCreateRoute
  '/details/$vehicleId': typeof DetailsVehicleIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/auction-alert': typeof AuctionAlertRouteWithChildren
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/auction-alert/create': typeof AuctionAlertCreateRoute
  '/details/$vehicleId': typeof DetailsVehicleIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/auction-alert'
    | '/login'
    | '/payment'
    | '/payment-error'
    | '/payment-success'
    | '/auction-alert/create'
    | '/details/$vehicleId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/auction-alert'
    | '/login'
    | '/payment'
    | '/payment-error'
    | '/payment-success'
    | '/auction-alert/create'
    | '/details/$vehicleId'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/auction-alert'
    | '/login'
    | '/payment'
    | '/payment-error'
    | '/payment-success'
    | '/auction-alert/create'
    | '/details/$vehicleId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  AuctionAlertRoute: typeof AuctionAlertRouteWithChildren
  LoginRoute: typeof LoginRoute
  PaymentRoute: typeof PaymentRoute
  PaymentErrorRoute: typeof PaymentErrorRoute
  PaymentSuccessRoute: typeof PaymentSuccessRoute
  DetailsVehicleIdRoute: typeof DetailsVehicleIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  AuctionAlertRoute: AuctionAlertRouteWithChildren,
  LoginRoute: LoginRoute,
  PaymentRoute: PaymentRoute,
  PaymentErrorRoute: PaymentErrorRoute,
  PaymentSuccessRoute: PaymentSuccessRoute,
  DetailsVehicleIdRoute: DetailsVehicleIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/account",
        "/auction-alert",
        "/login",
        "/payment",
        "/payment-error",
        "/payment-success",
        "/details/$vehicleId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/account": {
      "filePath": "account.tsx"
    },
    "/auction-alert": {
      "filePath": "auction-alert.tsx",
      "children": [
        "/auction-alert/create"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/payment": {
      "filePath": "payment.tsx"
    },
    "/payment-error": {
      "filePath": "payment-error.tsx"
    },
    "/payment-success": {
      "filePath": "payment-success.tsx"
    },
    "/auction-alert/create": {
      "filePath": "auction-alert.create.tsx",
      "parent": "/auction-alert"
    },
    "/details/$vehicleId": {
      "filePath": "details.$vehicleId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
