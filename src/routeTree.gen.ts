/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PaymentSuccessRouteImport } from './routes/payment-success'
import { Route as PaymentErrorRouteImport } from './routes/payment-error'
import { Route as PaymentRouteImport } from './routes/payment'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AccountRouteImport } from './routes/account'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuctionAlertIndexRouteImport } from './routes/auction-alert/index'
import { Route as DetailsVehicleIdRouteImport } from './routes/details.$vehicleId'
import { Route as AuctionAlertCreateAlertRouteImport } from './routes/auction-alert/create-alert'

const PaymentSuccessRoute = PaymentSuccessRouteImport.update({
  id: '/payment-success',
  path: '/payment-success',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentErrorRoute = PaymentErrorRouteImport.update({
  id: '/payment-error',
  path: '/payment-error',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentRoute = PaymentRouteImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuctionAlertIndexRoute = AuctionAlertIndexRouteImport.update({
  id: '/auction-alert/',
  path: '/auction-alert/',
  getParentRoute: () => rootRouteImport,
} as any)
const DetailsVehicleIdRoute = DetailsVehicleIdRouteImport.update({
  id: '/details/$vehicleId',
  path: '/details/$vehicleId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuctionAlertCreateAlertRoute = AuctionAlertCreateAlertRouteImport.update({
  id: '/auction-alert/create-alert',
  path: '/auction-alert/create-alert',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/auction-alert/create-alert': typeof AuctionAlertCreateAlertRoute
  '/details/$vehicleId': typeof DetailsVehicleIdRoute
  '/auction-alert': typeof AuctionAlertIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/auction-alert/create-alert': typeof AuctionAlertCreateAlertRoute
  '/details/$vehicleId': typeof DetailsVehicleIdRoute
  '/auction-alert': typeof AuctionAlertIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/auction-alert/create-alert': typeof AuctionAlertCreateAlertRoute
  '/details/$vehicleId': typeof DetailsVehicleIdRoute
  '/auction-alert/': typeof AuctionAlertIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/login'
    | '/payment'
    | '/payment-error'
    | '/payment-success'
    | '/auction-alert/create-alert'
    | '/details/$vehicleId'
    | '/auction-alert'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/login'
    | '/payment'
    | '/payment-error'
    | '/payment-success'
    | '/auction-alert/create-alert'
    | '/details/$vehicleId'
    | '/auction-alert'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/login'
    | '/payment'
    | '/payment-error'
    | '/payment-success'
    | '/auction-alert/create-alert'
    | '/details/$vehicleId'
    | '/auction-alert/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  LoginRoute: typeof LoginRoute
  PaymentRoute: typeof PaymentRoute
  PaymentErrorRoute: typeof PaymentErrorRoute
  PaymentSuccessRoute: typeof PaymentSuccessRoute
  AuctionAlertCreateAlertRoute: typeof AuctionAlertCreateAlertRoute
  DetailsVehicleIdRoute: typeof DetailsVehicleIdRoute
  AuctionAlertIndexRoute: typeof AuctionAlertIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/payment-success': {
      id: '/payment-success'
      path: '/payment-success'
      fullPath: '/payment-success'
      preLoaderRoute: typeof PaymentSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment-error': {
      id: '/payment-error'
      path: '/payment-error'
      fullPath: '/payment-error'
      preLoaderRoute: typeof PaymentErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auction-alert/': {
      id: '/auction-alert/'
      path: '/auction-alert'
      fullPath: '/auction-alert'
      preLoaderRoute: typeof AuctionAlertIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/details/$vehicleId': {
      id: '/details/$vehicleId'
      path: '/details/$vehicleId'
      fullPath: '/details/$vehicleId'
      preLoaderRoute: typeof DetailsVehicleIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auction-alert/create-alert': {
      id: '/auction-alert/create-alert'
      path: '/auction-alert/create-alert'
      fullPath: '/auction-alert/create-alert'
      preLoaderRoute: typeof AuctionAlertCreateAlertRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  LoginRoute: LoginRoute,
  PaymentRoute: PaymentRoute,
  PaymentErrorRoute: PaymentErrorRoute,
  PaymentSuccessRoute: PaymentSuccessRoute,
  AuctionAlertCreateAlertRoute: AuctionAlertCreateAlertRoute,
  DetailsVehicleIdRoute: DetailsVehicleIdRoute,
  AuctionAlertIndexRoute: AuctionAlertIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
